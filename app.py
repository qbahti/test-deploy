from flask import Flask, render_template, request, redirect, session, jsonify
import json
import os
from datetime import datetime
import uuid
import gspread
from google.oauth2.service_account import Credentials

app = Flask(__name__)
app.secret_key = 'any_secret_key'  # —Å–µ—Å—Å–∏—è “Ø—à—ñ–Ω –º—ñ–Ω–¥–µ—Ç—Ç—ñ

# –ü”ô–Ω —Ç—ñ–∑—ñ–º—ñ
SUBJECTS = ['–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '“ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–∞—Ä–∏—Ö—ã']

# –ë–∞—Å—Ç—ã –±–µ—Ç
@app.route('/')
def index():
    return render_template('index.html', subjects=SUBJECTS)

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

# –¢–µ—Å—Ç—Ç—ñ –±–∞—Å—Ç–∞—É
@app.route('/start', methods=['POST'])
def start_test():
    login = request.form.get('login')
    access_code = request.form.get('password')
    subject = request.form.get('subject')

    valid_codes = {
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': 'inf2024',
        '“ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–∞—Ä–∏—Ö—ã': 'tar2024'
    }

    if valid_codes.get(subject) != access_code:
        return render_template('index.html', error="“ö“±–ø–∏—è –∫–æ–¥ –¥“±—Ä—ã—Å –µ–º–µ—Å!", subjects=SUBJECTS)

    with open('data/students.json', 'r', encoding='utf-8') as f:
        students = json.load(f)

    if login not in students:
        return render_template('index.html', error="–õ–æ–≥–∏–Ω —Ç–∞–±—ã–ª–º–∞–¥—ã!", subjects=SUBJECTS)

    student = students[login]
    name = student['name']
    grade = student['grade']
    litera = student['litera']

    if subject == '“ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–∞—Ä–∏—Ö—ã':
        with open('data/questions_tarikh.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            raw_questions = data.get('single', [])
            questions = []

            for q in raw_questions:
                options = [{"text": opt, "image": None} for opt in q['options']]
                questions.append({
                    "question": q['question'],
                    "options": options,
                    "answer": q['answer'],
                    "image": None
                })

    else:
        with open('data/questions_informatika.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            questions = data.get('single', [])

    return render_template('test.html', name=name, subject=subject, grade=grade, litera=litera, questions=questions)
# –¢–µ—Å—Ç –Ω”ô—Ç–∏–∂–µ—Å—ñ–Ω “õ–∞–±—ã–ª–¥–∞—É
@app.route('/submit', methods=['POST'])
@app.route('/submit', methods=['POST'])
def submit():
    data = request.get_json()
    name = data['name']
    subject = data['subject']
    score = data['score']

    result = {
        'name': name,
        'subject': subject,
        'score': score
    }

    # –ù”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ —Å–∞“õ—Ç–∞–π–º—ã–∑
    results_file = 'results.json'
    if os.path.exists(results_file):
        with open(results_file, 'r', encoding='utf-8') as f:
            results = json.load(f)
    else:
        results = []

    results.append(result)

    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)

    # ‚úÖ Telegram —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
    TOKEN = '8081473807:AAHwArxl0zuBAtrLe6Rq4HZrds4FftOzFW0'
    CHAT_ID = '916119312'

    message = f"üì• –ñ–∞“£–∞ —Ç–µ—Å—Ç –Ω”ô—Ç–∏–∂–µ—Å—ñ:\nüë§ {name}\nüìö {subject}\nüìä “∞–ø–∞–π: {score}"

    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {
        'chat_id': CHAT_ID,
        'text': message
    }

    try:
        requests.post(url, data=payload)
    except Exception as e:
        print("Telegram —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–º–µ–¥—ñ:", e)

    return jsonify({'redirect': '/result?name=' + name + '&subject=' + subject + '&score=' + str(score)})


# –ù”ô—Ç–∏–∂–µ –±–µ—Ç—ñ
@app.route('/result')
def result():
    name = request.args.get('name')
    subject = request.args.get('subject')
    score = request.args.get('score')
    return render_template('result.html', name=name, subject=subject, score=score)

@app.route('/teacher/login', methods=['GET', 'POST'])
def teacher_login():
    if request.method == 'POST':
        subject = request.form.get('subject')
        password = request.form.get('password')

        correct_passwords = {
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': '12348',
            '“ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–∞—Ä–∏—Ö—ã': '12349'
        }

        if correct_passwords.get(subject) == password:
            session['teacher_logged_in'] = True
            session['teacher_subject'] = subject
            return redirect('/teacher/panel')
        else:
            return render_template('teacher_login.html', error='“ö“±–ø–∏—è —Å”©–∑ –¥“±—Ä—ã—Å –µ–º–µ—Å!')

    return render_template('teacher_login.html')

# üßë‚Äçüè´ –ú“±“ì–∞–ª—ñ–º –ø–∞–Ω–µ–ª—ñ
@app.route('/teacher/panel')
def teacher_panel():
    if not session.get('teacher_logged_in'):
        return redirect('/teacher/login')

    teacher_subject = session.get('teacher_subject')
    results = []

    if os.path.exists('results.json'):
        with open('results.json', 'r', encoding='utf-8') as f:
            all_results = json.load(f)
            results = [r for r in all_results if r['subject'] == teacher_subject]

    test_files = os.listdir('uploaded_tests') if os.path.exists('uploaded_tests') else []

    return render_template('teacher_panel.html', current_page='panel', results=results, test_files=test_files)


# –°–µ—Ä–≤–µ—Ä–¥—ñ —ñ—Å–∫–µ “õ–æ—Å—É
@app.route('/teacher/add_test', methods=['GET', 'POST'])

def add_test():
    if not session.get('teacher_logged_in'):
        return redirect('/teacher/login')

    if request.method == 'POST':
        subject = request.form.get('subject')
        questions = []
        index = 0

        while True:
            q_text = request.form.get(f'question_{index}')
            q_answer = request.form.get(f'correct_{index}')
            if not q_text or q_answer is None:
                break

            # üì• –°“±—Ä–∞“õ —Å—É—Ä–µ—Ç—ñ–Ω –∂“Ø–∫—Ç–µ—É
            image_file = request.files.get(f'image_{index}')
            image_path = None
            if image_file and image_file.filename != '':
                ext = image_file.filename.split('.')[-1]
                image_name = f"q_{uuid.uuid4().hex}.{ext}"
                image_path = f"static/images/{image_name}"
                image_file.save(image_path)

            options = []
            opt_idx = 0
            while True:
                opt_text = request.form.get(f'option_{index}_{opt_idx}')
                opt_image = request.files.get(f'option_img_{index}_{opt_idx}')
                if not opt_text:
                    break

                opt_image_url = None
                if opt_image and opt_image.filename != '':
                    ext = opt_image.filename.split('.')[-1]
                    image_name = f"opt_{uuid.uuid4().hex}.{ext}"
                    opt_image_url = f"static/images/{image_name}"
                    opt_image.save(opt_image_url)

                options.append({
                    'text': opt_text.strip(),
                    'image': opt_image_url  # None –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω
                })
                opt_idx += 1

            questions.append({
                'question': q_text.strip(),
                'image': image_path,  # None –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω
                'options': options,
                'answer': int(q_answer)
            })

            index += 1

         # –¢–∞“ì–∞–π—ã–Ω–¥–∞–ª“ì–∞–Ω JSON —Ñ–∞–π–ª
        subject_file = 'data/questions_informatika.json' if subject == '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞' else 'data/questions_tarikh.json'

        # –ï–≥–µ—Ä —Ñ–∞–π–ª –±“±—Ä—ã–Ω–Ω–∞–Ω –±–∞—Ä –±–æ–ª—Å–∞ ‚Äî —Å“±—Ä–∞“õ—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ “õ–æ—Å–∞–º—ã–∑
        if os.path.exists(subject_file):
            with open(subject_file, 'r', encoding='utf-8') as f:
                existing_data = json.load(f)
                if 'single' in existing_data:
                    existing_data['single'].extend(questions)
                else:
                    existing_data['single'] = questions
        else:
            existing_data = {'single': questions}

        # –ñ–∞“£–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä–º–µ–Ω –±—ñ—Ä–≥–µ “õ–∞–π—Ç–∞ –∂–∞–∑—É
        with open(subject_file, 'w', encoding='utf-8') as f:
            json.dump(existing_data, f, ensure_ascii=False, indent=2)
            

    return render_template('add_test.html', current_page='add_test')


if __name__ == '__main__':
    app.run(debug=True)

